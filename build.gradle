buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.+'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'

ext.modversion = "${project.version_major}.${project.version_minor}.${project.version_micro}"
group = project.group
version = "${project.version_minecraft}-${modversion}"
archivesBaseName = 'modid'

compileJava.options.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

idea {
    module {
        downloadSources = true
        inheritOutputDirs = true
    }
}

minecraft {
    mappings channel: project.version_mappings_channel, version: project.version_mappings
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                vrgenerator {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.version_minecraft}-${project.version_forge}"

    compile 'net.industrial-craft:industrialcraft-2:2.8.170-ex112:api'
    compile 'net.industrial-craft:industrialcraft-2:2.8.170-ex112:dev'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.version_minecraft

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand([
                'modid'          : project.modid,
                'modname'        : project.modname,
                'version'        : modversion,
                'mcversion'      : project.version_minecraft,
                'forgeversion'   : project.version_forge,
                'minforgeversion': project.hasProperty('version_minforge') ? project.version_minforge : project.version_forge,
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    classifier = "universal"
    manifest {
        attributes([
                "Specification-Title": project.modid,
                "Specification-Vendor": project.group,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.modname,
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :project.group,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourceJar(dependsOn: "classes", type: Jar) {
    from sourceSets.main.allSource
}

task devJar(dependsOn: 'classes', type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}


jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact devJar
        }
    }
}

// Workaround for ForgeGradle's bug
// https://github.com/anatawa12/migrating-ForgeGradle-2.3-to-4.x/commit/891dec61546c451386e7f38dcbad61853c0208cc
tasks.create("copyResourceToClasses", Copy.class) {
    tasks.classes.dependsOn(it)
    dependsOn(tasks.processResources)
    onlyIf { gradle.taskGraph.hasTask(tasks.prepareRuns) }

    into("$buildDir/classes/java/main")
    // if you write @Mod class in kotlin, please use code below
    // into("$buildDir/classes/kotlin/main")
    from(tasks.processResources.destinationDir)
}

if (!project.hasProperty('release_location'))
    ext.release_location = '.'
else
    ext.release_location = release_location.replace('{modid}', project.modid).replace('{mcversion}', project.version_minecraft).replace('{version}', version)

task release(dependsOn: 'signJars', type: Copy) {
    from project.tasks.jar.destinationDir
    into project.file(project.release_location)

    eachFile { file ->
        logger.lifecycle "copying ${file}"
    }

    onlyIf {
        return project.release_location != '.'
    }
}

if (project.hasProperty('api_key_curseforge') && project.hasProperty('extra_curseforge_id')) {
    curseforge {
        apiKey = project.api_key_curseforge
        //dependsOn signJars
        project {
            id = project.extra_curseforge_id
            changelog = project.hasProperty('extra_curseforge_changelog') ? project.extra_curseforge_changelog : ''
            releaseType = project.hasProperty('extra_curseforge_releasetype') ? project.extra_curseforge_releasetype : 'release'

            mainArtifact jar
            addArtifact devJar
            addArtifact sourceJar

            relations {
                requiredDependency 'industrial-craft'
            }
        }
    }
}